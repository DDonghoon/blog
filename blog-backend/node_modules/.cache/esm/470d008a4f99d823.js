let Koa,Router,bodyParser,mongoose,api,jwtMiddleware,createLogger;_4f9‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_4f9‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_4f9‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_4f9‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_4f9‍.w("./api",[["default",["api"],function(v){api=v}]]);_4f9‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_4f9‍.w("redux-logger/src",[["createLogger",["createLogger"],function(v){createLogger=v}]]);require('dotenv').config();





/*import createFakeData from "./createFakeData";*/




const logger = createLogger();

const {PORT,MONGO_URI} = process.env;




const app = new Koa();

mongoose.connect(MONGO_URI)
        .then(()=> {
    console.log('Connected to MongoDB');
    /*createFakeData();*/
    })
    .catch(e=>{
        _4f9‍.g.console.error(e);
});



const router = new Router();



router.use('/api',api.routes());

app.use(bodyParser());
app.use(jwtMiddleware);

app.use(router.routes()).use(router.allowedMethods(logger));


const port = PORT || 4000;
app.listen(port,()=>{
    _4f9‍.g.console.log("PORT=>",PORT);
    _4f9‍.g.console.log("MONGO_URI=>",MONGO_URI);

    _4f9‍.g.console.log('듣고 있다 개자슥아 %d',port);
});
